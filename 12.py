"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from math import floor

def get_triangle_number(nth):
    sum = 0
    for i in xrange(1,nth):
        sum += i
    return sum

def primes_to(max):
    numbers = [None]*(max+1)
    primes = []
    index = 2

    while index < max+1:

        if numbers[index] == None:

            multiplied_index = index*2
            while multiplied_index < max+1:
                numbers[multiplied_index] = 1
                multiplied_index += index
        index += 1

    for index, num in enumerate(numbers):
        if num != 1:
            primes.append(index)

    return primes[2::]

i = 2
while True:
    divisors = []

    tri_num = get_triangle_number(i)

    divisor = 1
    dividend = tri_num/divisor

    while dividend > divisor:
        #print dividend, divisor, divisors
        dividend = tri_num/divisor

        if dividend == floor(dividend):
            divisors.append(divisor)
            divisors.append(dividend)
        divisor += 1


    i+=1
    print i, len(divisors), divisors

    if len(divisors) > 500:
        print tri_num
        break






